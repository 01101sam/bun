17 |     callback();
18 |   }
19 | });
20 | pipeline(a, b, common.mustCall((error) => {
21 |   if (error) {
22 |     assert.ifError(error);
                ^
AssertionError: ifError got unwanted exception: EventEmitter2 {
  _events: {
    close: [
      [Function (anonymous)],
      [Function: onclose],
      [Function (anonymous)],
      [Function],
      [Function: onclose]
    ],
    error: [
      [Function: onerror],
      [Function: onerror],
      [Function: onError],
      [Function: onerror]
    ],
    prefinish: undefined,
    finish: [ [Function: onfinish], [Function], [Function: onfinish] ],
    drain: undefined,
    data: undefined,
    end: [ [Function: onend], [Function: onend] ],
    readable: undefined,
    unpipe: [ [Function: onunpipe] ]
  },
  _readableState: {
    highWaterMark: 65536,
    buffer: [],
    bufferIndex: 0,
    length: 0,
    pipes: [],
    awaitDrainWriters: null,
    [Symbol(kState)]: 1052940
  },
  _writableState: {
    highWaterMark: 65536,
    length: 0,
    corked: 0,
    onwrite: [Function: bound onwrite],
    writelen: 0,
    bufferedIndex: 0,
    pendingcb: 0,
    [Symbol(kState)]: 17580812,
    [Symbol(kBufferedValue)]: null
  },
  allowHalfOpen: true,
  _write: [Function: write],
  _maxListeners: undefined,
  _eventsCount: 5,
  [Symbol(kCapture)]: false
}
 code: "ERR_ASSERTION"

      at /Users/bun/code/bun/test/js/node/test/parallel/test-stream-pipeline-listeners.js:22:12
      at pipelineImpl (internal:streams/pipeline:145:22)
      at node:stream/promises:8:23
      at new Promise (native:1:11)
      at pipeline (node:stream/promises:7:18)
      at /Users/bun/code/bun/test/js/node/test/parallel/test-stream-pipeline-listeners.js:26:3
      at native:11:43
40 |       yield String(chunk).toUpperCase();
41 |     }
42 |   },
43 |   common.mustCall((error) => {
44 |     if (error) {
45 |       assert.ifError(error);
                  ^
AssertionError: ifError got unwanted exception: Object [AsyncGenerator] {}
 code: "ERR_ASSERTION"

      at /Users/bun/code/bun/test/js/node/test/parallel/test-stream-pipeline-listeners.js:45:14
      at pipelineImpl (internal:streams/pipeline:145:22)
      at node:stream/promises:8:23
      at new Promise (native:1:11)
      at pipeline (node:stream/promises:7:18)
      at /Users/bun/code/bun/test/js/node/test/parallel/test-stream-pipeline-listeners.js:50:5
      at native:11:43
51 |   };
52 | }
53 | function popCallback(streams) {
54 |   validateFunction(streams[streams.length - 1], "streams[stream.length - 1]");
55 |   return streams.pop();
56 | function makeAsyncIterable(val) {
                               ^
TypeError: The "val" argument must be of type Readable, Iterable or AsyncIterable. Received: [object Object]
 code: "ERR_INVALID_ARG_TYPE"

      at makeAsyncIterable (internal:streams/pipeline:56:27)
      at pipelineImpl (internal:streams/pipeline:145:22)
      at node:stream/promises:8:23
      at new Promise (1:11)
      at pipeline (node:stream/promises:7:18)
      at /Users/bun/code/bun/test/js/node/test/parallel/test-stream-pipeline-listeners.js:65:1
      at asyncFunctionResume (1:11)
      at promiseReactionJobWithoutPromiseUnwrapAsyncContext (1:11)
      at promiseReactionJob (1:11)
Mismatched <anonymous> function calls. Expected exactly 2, actual 0.
    at <anonymous> (/Users/bun/code/bun/test/js/node/test/parallel/test-stream-pipeline-listeners.js:7:40)
    at parseModule (native)
    at <anonymous> (native:11:43)
    at asyncFunctionResume (native:1:11)
    at promiseReactionJobWithoutPromiseUnwrapAsyncContext (native:1:11)
    at promiseReactionJob (native:1:11) {
  originalLine: 271,
  originalColumn: 22
}
Mismatched <anonymous> function calls. Expected exactly 1, actual 0.
    at <anonymous> (/Users/bun/code/bun/test/js/node/test/parallel/test-stream-pipeline-listeners.js:65:23)
    at parseModule (native)
    at <anonymous> (native:11:43)
    at asyncFunctionResume (native:1:11)
    at promiseReactionJobWithoutPromiseUnwrapAsyncContext (native:1:11)
    at promiseReactionJob (native:1:11) {
  originalLine: 271,
  originalColumn: 22
}
