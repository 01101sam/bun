/*= basic strings */
print("abc def");
print('abc def');
print(`abc def`);
/*= basic escapes */
print("\a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t  \v\w  \y\z\'\"\\\
");
/*=[c] newline escape forms 1 */ `
print(">\\\r< >\\\n< >\\\r\n< >\\\u{2028}< >\\\u{2029}<");
`
/*=[c] template literal newlines*/ `
print(\`line 1\rline 2\nline 3\r\nline 4\u{2028}line 5\u{2029}\`);
`
/*=[c] long string using vector path of indexOfCharactersInString */ `
// double quote ascii
print("${"a".repeat(10000)}");
// double quote utf-8
print("${"√¶".repeat(10000)}");
// template string ascii
print(\`${"a".repeat(10000)}\`);
// template string utf-8
print(\`${"√¶".repeat(10000)}\`);
`
/*=[c] invalid utf-8 */ new Uint8Array([
  ...new TextEncoder().encode(`print("`),
  0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA,
  ...new TextEncoder().encode(`");`),
])
/*= escape sequence error 1 :-: malformed Unicode character escape sequence */ print("\u");
/*= escape sequence error 2 :-: malformed Unicode character escape sequence */ print("\u1");
/*= escape sequence error 3 :-: malformed Unicode character escape sequence */ print("\u12");
/*= escape sequence error 4 :-: malformed Unicode character escape sequence */ print("\u123");
/*= escape sequence success */ print("\u1234")
/*= tagged template literal raw 1 */ print(String.raw`\u`)
/*= tagged template literal raw 2 */ print(String.raw`\u{`)
/*= tagged template literal raw 3 */ print(String.raw`\u{12345678}`)
/*= tagged template literal raw 4 */ print(String.raw`\x`)
/*= tagged template literal raw 5 */ print(String.raw`\0`)
/*= tagged template literal raw 6 */ print(String.raw`\9`)
/*= tagged template literal raw 7 */ print(String.raw`\
`)
/*= tagged template literal raw 8 */ print(String.raw`abc`)
/*= tagged template literal raw 9 */ print(String.raw``)
/*=[todo] tagged template literal raw 10 */ print(String.raw`√¶‚Ñ¢`)
/*= template literal regular */ print(`√¶‚Ñ¢`)
/*= tagged template literal raw 11 */; function a(){return b => print(""+b)}; new a()``/*=
/*= escaped identifier */ let \u0070 = "escaped identifier"; print(p);
/*= escaped identifier unicode */ let \u{10334} = "unicode!"; print(êå¥);
/*= escaped identifier unicode from surrogate halves :-: Unicode codepoint must not be a surrogate half in identifier */ let \uD800\uDF34 = "unicode!"; print(êå¥);
/*= escaped identifier other :-: Escape sequence in identifier must be unicode */ let \x70 = "escaped identifier!"; print(p);
/*= syntax error :-: error: Unexpected end of file */!!!
/*= syntax error :-: error: Unterminated string literal */"abc
/*= syntax error :-: error: Unterminated string literal */"abc
def"
/*= syntax error :-: error: Unterminated string literal */`abc
def
/*= syntax error :-: error: Unterminated string literal */`abc
de\u{2
/*= octal escape 1 */print("\44")
/*= octal escape 2 */print('\44')
/*= octal escape 3 :-: error: octal escape not allowed in untagged template literals */print(`\44`)
/*= null escape 1 */print("\0")
/*= null escape 2 */print('\0')
/*= null escape 3 */print(`\0`)
/*= null escape 4 */print("\00")
/*= null escape 5 */print('\00')
/*= null escape 6 :-: error: octal escape not allowed in untagged template literals */print(`\00`)